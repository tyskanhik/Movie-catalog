1 Как вы можете описать процесс распространения событий в
JavaScript (Event Propagation)? Расскажите о его основных фазах.
Какие есть способы применения знаний о фазах
рааспространения событий на практике?

Когда вы кликаете по кнопке, событие клика проходит 3 этапа:

Фаза захвата (Capture) - Событие спускается сверху вниз
Целевая фаза (Target) - Событие достигает элемента, на котором произошло
Фаза всплытия (Bubbling) - Событие поднимается обратно вверх по иерархии


-- *********************************************************************** --


2 Расскажите, что такое Promise в JavaScript, как он работает, какие
основные состояния у него бывают? Каким еще способом можно
обработать асинхронный код? Какую роль в асинхронности играет
событийный цикл (Event Loop)?

Promise - это контейнер для асинхронной операции, который гарантирует:
— Либо результат будет получен (resolve)
— Либо произойдёт ошибка (reject)

Состояния:

  pending - ожидание (начальное состояние)
  fulfilled - успешно выполнено
  rejected - выполнено с ошибкой

Другие способы обработки асинхронности:

  Callback-функции (устаревший способ)
  Async/await (синтаксический сахар над Promise)

  RxJS (Reactive Extensions) — для работы с потоками данных (Observables):
    Подходит для событий (клики, HTTP-запросы, WebSocket).
    Позволяет отменять операции, объединять потоки, фильтровать данные.

Роль Event Loop в асинхронности

JavaScript однопоточный, но Event Loop позволяет обрабатывать асинхронные задачи:

  Стек вызовов (Call Stack) — выполняет синхронный код.
  Очередь задач (Task Queue) — setTimeout, setInterval, DOM-события.
  Очередь микрозадач (Microtask Queue) — Promise.then, queueMicrotask.


-- *********************************************************************** --


3 Что такое ООП, и какие его ключевые принципы вы могли бы
описать? При объяснении приводите примеры. Максимально
подробно расскажите о том, как ООП реализовано в JavaScript.

ООП (Объектно-Ориентированное Программирование) - подход, где программа состоит из объектов, которые взаимодействуют друг с другом.

  4 основных принципа:

  Инкапсуляция - скрытие внутренней реализации
  Наследование - возможность создавать новые классы на основе существующих
  Полиморфизм - означает способность объектов разных классов реагировать на один и тот же метод по-разному
  Абстракция - создание простых моделей сложных вещей

ООП в JavaScript реализовано через:

  Прототипы (каждый объект имеет ссылку на прототип)
  Классы (синтаксический сахар над прототипами)
  Функции-конструкторы

-- *********************************************************************** --


4 Опишите максимально детально, как браузер обрабатывает URL,
начиная с момента его ввода в адресную строку и заканчивая
отображением страницы. Какие технологии позволяют ускорить
процесс? Какие проблемы (безопастность, междоменное
взаимодействие) могут возникать в процессе?

Пошаговый процесс:
Ввод URL - пользователь вводит адрес
DNS-запрос - браузер ищет IP-адрес сервера
Установка соединения - TCP
HTTPS-соединение - SSL/TLS-шифрование
HTTP-запрос - браузер запрашивает страницу
Обработка ответа:
  HTML → построение DOM
  CSS → построение CSSOM
  JavaScript → выполнение кода
  Рендеринг - отрисовка страницы

Технологии для ускорения:

  Кэширование (CDN, Service Workers)
  Предзагрузка ресурсов (<link rel="preload">)

  Проблемы:

Безопасность:

  XSS (межсайтовый скриптинг)
  CSRF (межсайтовая подделка запроса)

  Решение: валидация данных, CSP, CORS

Междоменное взаимодействие:

  Политика одинакового источника (Same Origin Policy)
  CORS (Cross-Origin Resource Sharing)